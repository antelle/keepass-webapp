name: 'üß∞ Tests'
run-name: 'üß∞ Tests'

# #
#   triggers
# #

on:
    push:
        branches:
            - 'main'
            - 'master'
            - 'develop'
            - 'development'
            - '!all-contributors/**'

    pull_request:
    workflow_dispatch:

          # #
          #   Name of the plugin to use when creating the release zip / exe filename
          #     e.g: keeweb-v1.0.0.zip
          # #

          PLUGIN_NAME:
              description:  "üì¶ Name of App"
              required:     true
              default:      'keeweb'
              type:         string


# #
#   environment variables
# #

env:
    PLUGIN_NAME:            ${{ github.event.inputs.PLUGIN_NAME || 'keeweb' }}
    CHANGELOG_MODE_COMMIT:  true
    SHOW_UNCATEGORIZED:     false
    PRERELEASE:             false
    VERSION_RC:             '1'
    FOLDER_DIST:            'dist'
    BOT_NAME_1:             EuropaServ
    BOT_NAME_DEPENDABOT:    dependabot[bot]

# #
#   jobs
# #

jobs:

    # #
    #   JOB > INITIALIZE
    # #

    job-initialize:
        name: >-
            üí° Initialize
        runs-on: ubuntu-latest
        outputs:
            package_version: ${{ steps.task_init_pkg_ver_get.outputs.PACKAGE_VERSION }}
            guid: ${{ steps.task_init_dotenv_get.outputs.GUID }}
            uuid: ${{ steps.task_init_dotenv_get.outputs.UUID }}
        permissions:
            contents: write
            packages: write
        steps:

            # #
            #   Job > Init > Start
            # #

            - name: '‚úÖ Start'
              id: task_init_start
              run: |
                  echo "Starting linter"

            # #
            #   Job > Init > Checkout
            # #

            - name: '‚òëÔ∏è Checkout'
              id: task_init_checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # #
            #   Job > Init > Setup Node
            # #

            - name: '‚öôÔ∏è Setup Node'
              id: task_init_node_setup
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'

            # #
            #   Job > Lint > NPM Install
            # #

            - name: 'üïõ NPM ‚Ä∫ Clean Install'
              id: task_init_npm_install
              run: |
                  npm ci

            # #
            #   Get version from package.json VERSION value
            # #

            - name: 'üëÅÔ∏è‚Äçüó®Ô∏è Get Package Version'
              id: task_init_pkg_ver_get
              run: |
                  VER=$(cat package.json | jq -r '.version')
                  echo "PACKAGE_VERSION=$VER" >> $GITHUB_OUTPUT

            - name: 'üëÅÔ∏è‚Äçüó®Ô∏è Found KeeWeb v${{ steps.task_init_pkg_ver_get.outputs.PACKAGE_VERSION }}'
              id: task_init_pkg_ver_print
              run: |
                  echo Found KeeWeb ${{ steps.task_init_pkg_ver_get.outputs.PACKAGE_VERSION }}

            # #
            #   generate guid and uuid
            # #

            - name: 'ü™™ .ENV ‚Ä∫ Generate'
              id: task_init_pkg_env_generate
              continue-on-error: true
              run: |
                  npm run keeweb:generate

            # #
            #   assign guid and uuid to env variable
            # #

            - name: 'ü™™ .ENV ‚Ä∫ Get'
              id: task_init_dotenv_get
              if: steps.task_init_pkg_env_generate.outcome == 'success'
              uses: falti/dotenv-action@v1

            # #
            #   read back guid and uuid
            # #

            - name: 'ü™™ .ENV ‚Ä∫ Read'
              id: task_init_dotenv_print
              if: steps.task_init_pkg_env_generate.outcome == 'success'
              run: |
                  echo "VER: ${{ steps.task_init_dotenv_get.outputs.VERSION }}"
                  echo "GUID: ${{ steps.task_init_dotenv_get.outputs.GUID }}"
                  echo "UUID: ${{ steps.task_init_dotenv_get.outputs.UUID }}"

    # #
    #   JOB > LINT
    # #

    job-lint:
        name: >-
            üìö Lint
        runs-on: ubuntu-latest
        needs: [job-initialize]
        env:
            PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
            GUID: ${{ needs.job-initialize.outputs.guid }}
            UUID: ${{ needs.job-initialize.outputs.uuid }}
        outputs:
            lint_success: ${{ steps.task_lint_npm_lint.outcome }}
        steps:

            # #
            #   Job > Lint > Checkout
            # #

            - name: '‚òëÔ∏è Checkout'
              id: task_lint_checkout
              uses: actions/checkout@v4

            # #
            #   Job > Lint > Setup Node
            # #

            - name: '‚öôÔ∏è Setup Node'
              id: task_lint_node_setup
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'

            # #
            #   Job > Lint > NPM Install
            # #

            - name: 'üïõ NPM ‚Ä∫ Clean Install'
              id: task_lint_npm_install
              run: |
                  npm ci

            # #
            #   Job > Lint > Run
            # #

            - name: 'üïû NPM ‚Ä∫ Lint'
              id: task_lint_npm_lint
              run: |
                  npm run lint

            # #
            #   Job > Lint > Generate Coverage
            # #

            - name: 'üïò NPM ‚Ä∫ Coverage'
              id: task_lint_npm_coverage
              if: always()
              run: |
                  npm run coverage

            # #
            #   Job > Lint > Upload Coverage to Codecov
            # #

            - name: 'üìù Upload Coverage Reports ‚Ä∫ Codecov'
              id: task_lint_codecov_upload
              if: steps.task_lint_npm_coverage.outcome == 'success'
              uses: codecov/codecov-action@v4.0.1
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  slug: keeweb/keeweb

    # #
    #   JOB > TESTS
    # #

    job-test:
        name: >-
            üß™ Tests
        runs-on: ubuntu-latest
        needs: [job-initialize]
        env:
            PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
        outputs:
            test_success: ${{ steps.task_test_npm_test.outcome }}
        steps:

            # #
            #   Job > Tests > Fix Line Endings
            # #

            - name: 'üõí Fix Git Checkout Line Endings'
              id: task_test_git_fixlines
              run: |
                  git config --global core.autocrlf input

            # #
            #   Job > Tests > Checkout
            # #

            - name: '‚òëÔ∏è Checkout'
              id: task_test_checkout
              uses: actions/checkout@v4

            # #
            #   Job > Tests > Setup Node
            # #

            - name: '‚öôÔ∏è Setup Node'
              id: task_test_node_setup
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'

            # #
            #   Job > Tests > NPM Install
            # #

            - name: 'üïõ NPM ‚Ä∫ Clean Install'
              id: task_test_npm_install
              run: |
                  npm ci

            # #
            #   Job > Tests > Run
            # #

            - name: 'üïò NPM ‚Ä∫ Test'
              id: task_test_npm_test
              run: |
                  npm run test

    # #
    #   JOB > COMPLETE
    # #

    job-complete-run:
        name: >-
            ‚úÖ Complete
        runs-on: ubuntu-latest
        needs: [job-initialize, job-lint, job-test]
        env:
            PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
            TEST_SUCCESS: ${{ needs.job-test.outputs.test_success }}
            LINT_SUCCESS: ${{ needs.job-lint.outputs.lint_success }}
            GUID: ${{ needs.job-initialize.outputs.guid }}
            UUID: ${{ needs.job-initialize.outputs.uuid }}
        steps:

            # #
            #   Job > Complete > Get publish timestamp
            # #

            - name: 'üïõ Get Timestamp'
              id: task_tests_complete_timestamp
              run: |
                  echo "NOW=$(date +'%m-%d-%Y %H:%M:%S')" >> $GITHUB_ENV

            # #
            #   Job > Complete > Debug Print
            # #

            - name: "üîñ Output"
              run: |
                echo "LINT_SUCCESS: ${{ env.LINT_SUCCESS }}"
                echo "TEST_SUCCESS: ${{ env.TEST_SUCCESS }}"

            # #
            #   Job > Complete > Summary of publish
            # #

            - name: 'üÜó Summary: ${{ env.NOW }} - ${{ env.PACKAGE_VERSION }}'
              id: task_tests_complete_summary
              shell: bash
              run: |
                  echo ""
                  echo ""
                  echo "| File                            | Result                                                          |" >> $GITHUB_STEP_SUMMARY
                  echo "| ------------------------------- | -----------------------                                         |" >> $GITHUB_STEP_SUMMARY
                  echo "| **Project**                     | ${{ env.PLUGIN_NAME || github.event.inputs.PLUGIN_NAME }}       |" >> $GITHUB_STEP_SUMMARY
                  echo "| **Deploy Time**                 | ${{ env.NOW }}                                                  |" >> $GITHUB_STEP_SUMMARY
                  echo "| **GUID**                        | ${{ env.GUID }}                                                 |" >> $GITHUB_STEP_SUMMARY
                  echo "| **UUID**                        | ${{ env.UUID }}                                                 |" >> $GITHUB_STEP_SUMMARY
                  if [ ${{ env.LINT_SUCCESS }} == 'true' ] || [ ${{ env.LINT_SUCCESS }} == 'success' ]; then
                      echo "| **Lint Results**            | ‚úîÔ∏è                                                              |" >> $GITHUB_STEP_SUMMARY
                  else
                      echo "| **Lint Results**            | ‚ùå                                                              |" >> $GITHUB_STEP_SUMMARY
                  fi
                  if [ ${{ env.TEST_SUCCESS }} == 'true' ] || [ ${{ env.TEST_SUCCESS }} == 'success' ]; then
                      echo "| **Test Results**            | ‚úîÔ∏è                                                              |" >> $GITHUB_STEP_SUMMARY
                  else
                      echo "| **Test Results**            | ‚ùå                                                              |" >> $GITHUB_STEP_SUMMARY
                  fi
